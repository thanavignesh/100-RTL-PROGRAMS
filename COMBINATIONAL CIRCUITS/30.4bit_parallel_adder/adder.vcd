$date
	Mon Feb 13 21:38:32 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module parallel_adder_tb $end
$var wire 4 ! s [3:0] $end
$var wire 4 " c [4:1] $end
$var reg 4 # a [3:0] $end
$var reg 4 $ b [3:0] $end
$var reg 1 % cin $end
$scope module pa1 $end
$var wire 4 & a [3:0] $end
$var wire 4 ' b [3:0] $end
$var wire 1 % cin $end
$var wire 4 ( s [3:0] $end
$var wire 4 ) c [3:0] $end
$scope module fa1 $end
$var wire 1 * a $end
$var wire 1 + b $end
$var wire 1 % c $end
$var wire 1 , cout $end
$var wire 1 - sum $end
$var wire 1 . y1 $end
$var wire 1 / y2 $end
$var wire 1 0 y3 $end
$var wire 1 1 y4 $end
$upscope $end
$scope module fa2 $end
$var wire 1 2 a $end
$var wire 1 3 b $end
$var wire 1 4 c $end
$var wire 1 5 cout $end
$var wire 1 6 sum $end
$var wire 1 7 y1 $end
$var wire 1 8 y2 $end
$var wire 1 9 y3 $end
$var wire 1 : y4 $end
$upscope $end
$scope module fa3 $end
$var wire 1 ; a $end
$var wire 1 < b $end
$var wire 1 = c $end
$var wire 1 > cout $end
$var wire 1 ? sum $end
$var wire 1 @ y1 $end
$var wire 1 A y2 $end
$var wire 1 B y3 $end
$var wire 1 C y4 $end
$upscope $end
$scope module fa4 $end
$var wire 1 D a $end
$var wire 1 E b $end
$var wire 1 F c $end
$var wire 1 G cout $end
$var wire 1 H sum $end
$var wire 1 I y1 $end
$var wire 1 J y2 $end
$var wire 1 K y3 $end
$var wire 1 L y4 $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
zL
xK
xJ
xI
xH
xG
xF
xE
xD
zC
xB
xA
x@
x?
x>
x=
x<
x;
z:
x9
x8
x7
x6
x5
x4
x3
x2
z1
x0
x/
x.
x-
x,
x+
x*
bx )
bx (
bx '
bx &
x%
bx $
bx #
bx "
bx !
$end
#2
0J
1*
12
1;
0D
b111 #
b111 &
#4
09
0K
1+
03
1<
0E
b101 $
b101 '
#6
bx1 !
bx1 (
1-
1.
0/
00
0%
#106
